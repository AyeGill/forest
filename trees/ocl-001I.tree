\title{Tuple Types and Tries in Computer Algebra}
\import{macros}
\date{2024-02-26}

\p{In [Symbolic presentations of dynamical systems](https://blog.algebraicjulia.org/post/2023/05/algebraic-geometry-2/), I laid out a way of mathematically thinking about symbolic models of dynamical systems. We now have a [draft](https://github.com/AlgebraicJulia/GATlab.jl/pull/136) of an implementation for this.}

\p{Why did this take so long? Part of the reason is that in category theory, we pervasively use \nlab{symmetric monoidal categories}, defined via a binary monoidal product. If we want to implement products of ring presentations on a computer, we have two options. One option is to name our variables with integers \code{1:n}. Then taking the product of a presentation with variables \code{1:n} and \code{1:m} leads to a presentation with variables \code{1:(n+m)}. Note that this is the "product" even though it seems like a sum, because algebra is dual to geometry. Numerical indexing of variables is what we did in the original implementation of GATlab. The advantage here is that this is strictly associative.}

\p{However from a usability perspective, this is garbage. First of all, users can't remember numbers, they want to use names. But more importantly, even if you could remember numbers, the numbers keep changing! The variables that used to be \code{1:m} now become \code{(n+1):(n+m)}. Dealing with this is annoying and confusing.}

\p{Another approach is to do a binary product which is not strictly associative. This is how functional programming languages do coproduct, via an \code{Either a b} type, with \code{Left : a -> Either a b} and \code{Right : b -> Either a b} constructors. This has the advantage that it is more readable, however because it is not associative, it becomes annoying to use for when we want to combine three ring presentations, for instance.}

\p{What we really want is to }
